load("@stdlib//unittest", "unittest")
load("@vendor//asserts", "asserts")
load("@stdlib//hashlib", "hashlib")
load("@stdlib//binascii", "binascii")
load("@vgs//vault", "vault")
load("@vgs//http/request", "VGSHttpRequest")
load("@stdlib//json", "json")
load("@stdlib//builtins", builtins="builtins")
load("@stdlib//base64", base64="base64")
load("@vendor//Crypto/Cipher/DES3", DES3="DES3")

vault = {
    'tok_sandbox_iU31dWwSWs12X4W1tAgQNy': '714bb902065f3c279653cf87'
}

def process(input, ctx):
    body = input.body
    # keys below  are not real (generated by randomizer)
    secret_key_alias = 'tok_sandbox_iU31dWwSWs12X4W1tAgQNy'
    secret_key = vault.get(secret_key_alias)

    plainText = bytes(str(body), 'utf-8')
    padding = 0
    if len(plainText) % 8 != 0:
        padding = 8 - (len(plainText) % 8)
        plainText = plainText + bytes([padding] * padding)
    
    # encryption:
    cipher = DES3.new(secret_key, DES3.MODE_ECB)
    encrypted =  str(base64.b64encode(cipher.encrypt(plainText)))
    body = {
        "padding": padding,
        "client": encrypted
    }

    # decrypting (opposite flow):
    res_bytes = cipher.decrypt(base64.b64decode(encrypted))
    padding = body['padding']
    decrypted = res_bytes.decode('utf-8')[:-padding] # cut padding to be able json.loads()
    body['decrypted'] = json.loads(decrypted)

    input.body = builtins.bytes(json.dumps(body))
    return input


def test_process():
    # keys below  are not real (generated by randomizer)
    headers = {}
    body = b'{"cardno": "5438898014560229", "cvv": "890", "expirymonth": "09", "expiryyear": "23", "currency": "USD", "country": "US", "suggested_auth": "cpin", "pin": "3310", "amount": "100", "email": "john.wick@domain.com", "firstname": "John", "lastname": "Wick"}'
    input = VGSHttpRequest("https://test.com/post", data=body, headers=headers, method='POST')
    response = process(input, None)
    expected_body = b'{"client":"AB6bq600zxhpjG9IR+GwO6Dsm+kecGGXo7uQaEELvI/L+Rorfecadg3labXy6eHg/Jsr9AoyDpzlIRanHt4r83Fmu4bRSVshLnJpNahyMLCvIfa+VLhamTA17FqJfwKHpQLG2JXEB1DgKZxJ6CcNPNEwp06css8nST9C+LlXg+vxY00YV3YYlCsbBX2Hkg6brIpDUV1owzy4FBZbtEkFUMZJhRDWMXqZayuiRZAT8FtgIkibrzLRR064I/0a7fXuGBXV+svr//0uz6ck1iXkXYGjg9lJixbfeCUUVm3SCsxLwVPx46LhOsmApFu8kI4MmxyEjysQYD7s0WZREV43Jw==","decrypted":{"amount":"100","cardno":"5438898014560229","country":"US","currency":"USD","cvv":"890","email":"john.wick@domain.com","expirymonth":"09","expiryyear":"23","firstname":"John","lastname":"Wick","pin":"3310","suggested_auth":"cpin"},"padding":3}'
    print(response.body)
    print(expected_body)
    asserts.assert_that(response.body).is_equal_to(expected_body)


def _testsuite():
  _suite = unittest.TestSuite()
  _suite.addTest(unittest.FunctionTestCase(test_process))
  return _suite

_runner = unittest.TextTestRunner()
_runner.run(_testsuite())