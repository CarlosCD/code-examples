load("@stdlib//unittest", "unittest")
load("@vendor//asserts", "asserts")
load("@stdlib//hashlib", "hashlib")
load("@stdlib//binascii", "binascii")
load("@vgs//vault", "vault")
load("@vgs//http/request", "VGSHttpRequest")
load("@stdlib//json", "json")
load("@stdlib//builtins", builtins="builtins")
load("@stdlib//base64", base64="base64")
load("@vendor//Crypto/Cipher/DES3", DES3="DES3")

def process(input, ctx):
    data = input.body
    # keys below  are not real (generated by randomizer)
    secret_key = 'TSTSECK-714bb902065f722b150a36e9578e6fe5-X'
    secret_key_utf8 = bytes(secret_key, encoding="utf-8")
    hashedseckey = hashlib.md5(secret_key_utf8).hexdigest()
    hashedseckeylast12 = hashedseckey[-12:]
    seckeyadjusted = secret_key.replace('TSTSECK-', '')
    seckeyadjustedfirst12 = seckeyadjusted[:12]
    key = seckeyadjustedfirst12 + hashedseckeylast12

    plainText = bytes(str(data), 'utf-8')
    padding = 0
    if len(plainText) % 8 != 0:
        padding = 8 - (len(plainText) % 8)
        plainText = plainText + bytes([padding] * padding)
    cipher = DES3.new(key, DES3.MODE_ECB)
    encrypted =  str(base64.b64encode(cipher.encrypt(plainText)))

    # decrypting (opposite flow):
    res_bytes = cipher.decrypt(base64.b64decode(encrypted))
    decrypted = json.loads(res_bytes.decode('utf-8'))

    body = {
        "PBFPubKey": "TSTPUBK-4d1e634d904ededaf0b635d5a0a2f06d-X",
        "client": encrypted,
        "decrypted": decrypted,
        "alg": "3DES-24"
    }

    input.body = builtins.bytes(json.dumps(body))
    return input


def test_process():
    # keys below  are not real (generated by randomizer)
    headers = {}
    body = b'{"PBFPubKey": "TSTPUBK-4d1e634d904ededaf0b635d5a0a2f06d-X", "cardno": "5438898014560229", "cvv": "890", "expirymonth": "09", "expiryyear": "23", "currency": "USD", "country": "US", "suggested_auth": "cpin", "pin": "3310", "amount": "100", "email": "john.wick@domain.com", "firstname": "John", "lastname": "Wick"}'
    input = VGSHttpRequest("https://test.com/post", data=body, headers=headers, method='POST')
    response = process(input, None)
    expected_body = b'{"PBFPubKey":"TSTPUBK-4d1e634d904ededaf0b635d5a0a2f06d-X","alg":"3DES-24","client":"qQ+twU0rNrAH14RHqoKqIcIVC/z796bp7uYEvop+gb0C72H9c/jeGwbXwp9Ibqe0GMAj7IErTZ0znvZAeIn6iJPr+LU/qmhLjt1MEYVhwXWMfZdfV3M4DF4m/RWBipZhzNSpHxcaSBjdDOK5kJtkSpCvonb+4p+mf6ND+Yb2R0gXyXDYsTIlVSA2ZWt3bsbok0XOJnSUCWmj8qiJig0L3j3NTHOjuOqH/owcQZpcUFzdbiUmg9aZ9wnU03OZnMF48ICBaYsqkPA5HlWCiWNxu2mhSf6uZZLzB5k74lmiBiJlrnbG9SJ8e9LtebmmN5DVY7f3xGj5xPH5uQNQysvh0gpl90LfHspWPL4L0TBNim3z1GKuEEGxoRF8mz2dFitsVf3aJP/FNlwe4aTTQuCK4fweyZfmbtMD","decrypted":{"PBFPubKey":"TSTPUBK-4d1e634d904ededaf0b635d5a0a2f06d-X","amount":"100","cardno":"5438898014560229","country":"US","currency":"USD","cvv":"890","email":"john.wick@domain.com","expirymonth":"09","expiryyear":"23","firstname":"John","lastname":"Wick","pin":"3310","suggested_auth":"cpin"}}'
    print(response.body)
    print(expected_body)
    asserts.assert_that(response.body).is_equal_to(expected_body)


def _testsuite():
  _suite = unittest.TestSuite()
  _suite.addTest(unittest.FunctionTestCase(test_process))
  return _suite

_runner = unittest.TextTestRunner()
_runner.run(_testsuite())