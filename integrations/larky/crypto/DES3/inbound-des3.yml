data:
  - attributes:
      created_at: '2021-04-26T09:55:37'
      destination_override_endpoint: 'https://echo.apps.verygood.systems'
      entries:
        - classifiers: {}
          config:
            condition: AND
            rules:
              - condition: null
                expression:
                  field: PathInfo
                  operator: matches
                  type: string
                  values:
                    - /post
              - condition: null
                expression:
                  field: ContentType
                  operator: equals
                  type: string
                  values:
                    - application/json
          id: 3e4ca047-23e2-4397-9a67-d673cedf4cc8
          id_selector: null
          operation: REDACT
          operations:
            - name: github.com/verygoodsecurity/common/compute/larky/http/Process
              parameters:
                script: |-
                  load("@vgs//vault", "vault")
                  load("@stdlib//hashlib", "hashlib")
                  load("@stdlib//base64", base64="base64")
                  load("@stdlib//builtins", builtins="builtins")
                  load("@stdlib//json", json="json")
                  load("@vendor//Crypto/Cipher/DES3", DES3="DES3")

                  def process(input, ctx):
                      data = input.body
                      # keys below  are not real (generated by randomizer)
                      secret_key = 'TSTSECK-714bb902065f722b150a36e9578e6fe5-X'
                      secret_key_utf8 = bytes(secret_key, encoding="utf-8")
                      hashedseckey = hashlib.md5(secret_key_utf8).hexdigest()
                      hashedseckeylast12 = hashedseckey[-12:]
                      seckeyadjusted = secret_key.replace('TSTSECK-', '')
                      seckeyadjustedfirst12 = seckeyadjusted[:12]
                      key = seckeyadjustedfirst12 + hashedseckeylast12

                      plainText = bytes(str(data), 'utf-8')
                      padding = 0
                      if len(plainText) % 8 != 0:
                          padding = 8 - (len(plainText) % 8)
                          plainText = plainText + bytes([padding] * padding)
                      cipher = DES3.new(key, DES3.MODE_ECB)
                      encrypted =  str(base64.b64encode(cipher.encrypt(plainText)))

                      # decrypting (opposite flow):
                      res_bytes = cipher.decrypt(base64.b64decode(encrypted))
                      decrypted = json.loads(res_bytes.decode('utf-8'))

                      body = {
                          "PBFPubKey": "TSTPUBK-4d1e634d904ededaf0b635d5a0a2f06d-X",
                          "client": encrypted,
                          "decrypted": decrypted,
                          "alg": "3DES-24"
                      }

                      input.body = builtins.bytes(json.dumps(body))
                      return input
          phase: REQUEST
          public_token_generator: UUID
          targets:
            - body
          token_manager: PERSISTENT
          transformer: JSON_PATH
          transformer_config:
            - $.email
          transformer_config_map: null
      host_endpoint: (.*)\.verygoodproxy\.com
      id: c891d346-0e1b-49b8-99ac-0754d34f14f2
      ordinal: null
      port: 80
      protocol: http
      source_endpoint: '*'
      tags:
        name: echo.apps.verygood.systems-steel-blue-parallelogram
        source: RouteContainer
      updated_at: '2021-05-07T11:45:32'
    id: c891d346-0e1b-49b8-99ac-0754d34f14f2
    type: rule_chain
version: 1
